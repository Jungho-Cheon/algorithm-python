1. 구조화 (상황 분석)
2. 절차적 사고
3. 구현 능력

* 주어진 문제를 요구사항에 맞게..

* 대표 유형
1. 파싱, 해싱, 정렬, 시뮬레이션 -> 구현
2. 탐색(BFS/DFS), 완전탐색(백트래킹) -> 탐색
3. 자료구조(스택, 힙, 큐 등) -> 구조
4. greedy, DP, 이분탐색 -> 알고리즘

* 요구사항을 정확히 파악하자..

* 로직이 맞는데 틀렸다..
-> 자신이 틀린것이다.
-> 멘탈관리를하고 로직을 차근차근 검토해야한다.
-> 컴파일 에러 : 문법 오류
-> 시간초과(TLE), 메모리 초과(MLE) : 최적화 필요
-> 런타임 에러(RE) : 과정 오류
    - 0으로 나누는 경우
    - container에서 index오류
    - 무한루프

* 틀렸습니다.
1. 제한 및 대소 관계 (이상, 이하, 초과, 미만..)
2. 예외 처리 (ex. 단, 없는 경우 -1을 출력한다.)
3. 입력과 출력 (공백, 양식, 순서, 정렬 유무)
4. 시간 제한과 메모리 제한..(-> 어떤 알고리즘을 사용하는지 결정하기 때문에 중요하게 봐야함..)


* 문제 모델링
1. 수치 및 조건 정리하기
2. 전체적인 흐름 그리기
3. 입출력 예제 이해하기
